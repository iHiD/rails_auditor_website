require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe AuditsController do

  # This should return the minimal set of attributes required to create a valid
  # @project.audits. As you add validations to @project.audits, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # @project.auditssController. Be sure to keep this updated too.
  def valid_session
    {}
  end
  
  before :each do 
    @project = FactoryGirl.create(:project)
  end
  
=begin

  describe "GET index" do
    it "assigns all audits as @audits" do
      audit = @project.audits.create! valid_attributes
      get :index, {}, valid_session
      assigns(:audits).should eq([audit])
    end
  end
=end

  describe "GET show" do
    it "assigns the requested audit as @audit" do
      audit = @project.audits.create! valid_attributes
      get :show, {:project_id => @project.id, :id => audit.to_param}, valid_session
      assigns(:audit).should eq(audit)
    end
  end

  describe "GET new" do
    it "assigns a new audit as @audit" do
      get :new, {:project_id => @project.id}, valid_session
      assigns(:audit).should be_a_new(Audit)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new @project.audits" do
        expect {
          post :create, {:project_id => @project.id, :audit => valid_attributes}, valid_session
        }.to change(@project.audits, :count).by(1)
      end

      it "assigns a newly created audit as @audit" do
        post :create, {:project_id => @project.id, :audit => valid_attributes}, valid_session
        assigns(:audit).should be_a(Audit)
        assigns(:audit).should be_persisted
      end

      it "redirects to the created audit" do
        post :create, {:project_id => @project.id, :audit => valid_attributes}, valid_session
        response.should redirect_to(@project)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved audit as @audit" do
        # Trigger the behavior that occurs when invalid params are submitted
        @project.audits.any_instance.stub(:save).and_return(false)
        post :create, {:project_id => @project.id, :audit => {}}, valid_session
        assigns(:audit).should be_a_new(Audit)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        @project.audits.any_instance.stub(:save).and_return(false)
        post :create, {:project_id => @project.id, :audit => {}}, valid_session
        response.should render_template("new")
      end
    end
  end
  
=begin

  describe "GET edit" do
    it "assigns the requested audit as @audit" do
      audit = @project.audits.create! valid_attributes
      get :edit, {:id => audit.to_param}, valid_session
      assigns(:audit).should eq(audit)
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested audit" do
        audit = @project.audits.create! valid_attributes
        # Assuming there are no other audits in the database, this
        # specifies that the @project.audits created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        @project.audits.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => audit.to_param, :audit => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested audit as @audit" do
        audit = @project.audits.create! valid_attributes
        put :update, {:id => audit.to_param, :audit => valid_attributes}, valid_session
        assigns(:audit).should eq(audit)
      end

      it "redirects to the audit" do
        audit = @project.audits.create! valid_attributes
        put :update, {:id => audit.to_param, :audit => valid_attributes}, valid_session
        response.should redirect_to(audit)
      end
    end

    describe "with invalid params" do
      it "assigns the audit as @audit" do
        audit = @project.audits.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        @project.audits.any_instance.stub(:save).and_return(false)
        put :update, {:id => audit.to_param, :audit => {}}, valid_session
        assigns(:audit).should eq(audit)
      end

      it "re-renders the 'edit' template" do
        audit = @project.audits.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        @project.audits.any_instance.stub(:save).and_return(false)
        put :update, {:id => audit.to_param, :audit => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested audit" do
      audit = @project.audits.create! valid_attributes
      expect {
        delete :destroy, {:id => audit.to_param}, valid_session
      }.to change(@project.audits, :count).by(-1)
    end

    it "redirects to the audits list" do
      audit = @project.audits.create! valid_attributes
      delete :destroy, {:id => audit.to_param}, valid_session
      response.should redirect_to(audits_url)
    end
  end
=end
end
